// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'backend/models/discount.dart';
import 'backend/models/order_row.dart';
import 'backend/models/order_row_item.dart';
import 'backend/models/outlet.dart';
import 'backend/models/payment_method.dart';
import 'backend/models/product.dart';
import 'backend/models/product_category.dart';
import 'backend/models/product_revision.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 2539012349328530),
      name: 'PaymentMethod',
      lastPropertyId: const obx_int.IdUid(5, 4391943279528832848),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4701283987962480105),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4254322473529539152),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8518206495221079470),
            name: 'sameAsAmount',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2551305917053112701),
            name: 'active',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4391943279528832848),
            name: 'outletId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 409284145623593574),
            relationTarget: 'Outlet')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(4, 5697342907911373828),
            name: 'orders',
            targetId: const obx_int.IdUid(7, 128477593751))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 230852403568201342),
      name: 'Product',
      lastPropertyId: const obx_int.IdUid(6, 5652487840915663998),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5799350576406641059),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1368043638889163425),
            name: 'active',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8938333377313829286),
            name: 'outletId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 6721522663895773096),
            relationTarget: 'Outlet'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5770325097267842511),
            name: 'nameInReceipt',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6272119524883369596),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5652487840915663998),
            name: 'code',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 236069021593903646),
            name: 'categories',
            targetId: const obx_int.IdUid(4, 6617611348773466436))
      ],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'revisions',
            srcEntity: 'ProductRevision',
            srcField: 'product')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 6617611348773466436),
      name: 'ProductCategory',
      lastPropertyId: const obx_int.IdUid(4, 855998878742877312),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7124895912927923778),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2815216646734343318),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8143600747932343548),
            name: 'active',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 855998878742877312),
            name: 'outletId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 5561885852980041816),
            relationTarget: 'Outlet')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'products', srcEntity: 'Product', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 12846973592481),
      name: 'ProductRevision',
      lastPropertyId: const obx_int.IdUid(7, 4455426604934092435),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8525180442042784070),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6441098748032554860),
            name: 'numberOfRevision',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7201161724556323480),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4455426604934092435),
            name: 'productId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(9, 846710663453206054),
            relationTarget: 'Product')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 319843295736912),
      name: 'Discount',
      lastPropertyId: const obx_int.IdUid(4, 8495380552060590630),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2213383663263183103),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3752228957976903765),
            name: 'discountPercentage',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6518919147508049731),
            name: 'discountPrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8495380552060590630),
            name: 'fixedPrice',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 128477593751),
      name: 'OrderRow',
      lastPropertyId: const obx_int.IdUid(9, 4900591366863429357),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2952043639329509478),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6704187388547123643),
            name: 'timeStamp',
            type: 12,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8011937852448718600),
            name: 'payAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2883003045937552520),
            name: 'isTaxActive',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3851571489293394259),
            name: 'taxPercentage',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3404101012253721567),
            name: 'totalPrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5060805972677061175),
            name: 'totalItem',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1014833667103194795),
            name: 'outletId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 5295939891617266402),
            relationTarget: 'Outlet'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4900591366863429357),
            name: 'paymentMethodId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 2806997878861944019),
            relationTarget: 'PaymentMethod')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(3, 1494955119149450721),
            name: 'orderRowItem',
            targetId: const obx_int.IdUid(8, 4805377593213751))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 4805377593213751),
      name: 'OrderRowItem',
      lastPropertyId: const obx_int.IdUid(6, 7449171361771780484),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3748551687361985948),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4505632478539841253),
            name: 'orderRowId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 3130121396998096755),
            relationTarget: 'OrderRow'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2504709692109099021),
            name: 'productId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(7, 7787362082258196212),
            relationTarget: 'Product'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2381886157008485361),
            name: 'productRevisionId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(8, 2207489330736101344),
            relationTarget: 'ProductRevision'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8351207008635071207),
            name: 'quantity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7449171361771780484),
            name: 'totalPriceItem',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(10, 2542198763334126311),
      name: 'Outlet',
      lastPropertyId: const obx_int.IdUid(7, 3377237826965667898),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5174283431022853019),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1121591388550441851),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5333370120388955754),
            name: 'address',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 474586892130838890),
            name: 'phoneNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1001330471433499191),
            name: 'receiptMessage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6824525921531499007),
            name: 'activeTax',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3377237826965667898),
            name: 'taxPercentage',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'paymentMethods',
            srcEntity: 'PaymentMethod',
            srcField: 'outlet'),
        obx_int.ModelBacklink(
            name: 'productCategories',
            srcEntity: 'ProductCategory',
            srcField: 'outlet'),
        obx_int.ModelBacklink(
            name: 'products', srcEntity: 'Product', srcField: 'outlet'),
        obx_int.ModelBacklink(
            name: 'orders', srcEntity: 'OrderRow', srcField: 'outlet')
      ])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(10, 2542198763334126311),
      lastIndexId: const obx_int.IdUid(9, 846710663453206054),
      lastRelationId: const obx_int.IdUid(4, 5697342907911373828),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [2542198763334326311, 3207224150785922877],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        3859835816503269585,
        2390428648715422367,
        4912880876948582691,
        6933070741095145811,
        1872052628146773427,
        2563186051625754433,
        6227155981172291115,
        965984936511391196,
        5661030839249149419,
        4459593711385785577,
        8962473758731357556,
        4409864400498076608,
        6249709944924276547,
        6767596588166861664,
        5166805166751715899,
        5637540551721854729,
        5175937979182934318
      ],
      retiredRelationUids: const [8930154353795273874],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    PaymentMethod: obx_int.EntityDefinition<PaymentMethod>(
        model: _entities[0],
        toOneRelations: (PaymentMethod object) => [object.outlet],
        toManyRelations: (PaymentMethod object) => {
              obx_int.RelInfo<PaymentMethod>.toMany(4, object.id): object.orders
            },
        getId: (PaymentMethod object) => object.id,
        setId: (PaymentMethod object, int id) {
          object.id = id;
        },
        objectToFB: (PaymentMethod object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addBool(2, object.sameAsAmount);
          fbb.addBool(3, object.active);
          fbb.addInt64(4, object.outlet.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final sameAsAmountParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final activeParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final object = PaymentMethod(
              name: nameParam,
              sameAsAmount: sameAsAmountParam,
              active: activeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.outlet.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.outlet.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<PaymentMethod>(object.orders,
              store, obx_int.RelInfo<PaymentMethod>.toMany(4, object.id));
          return object;
        }),
    Product: obx_int.EntityDefinition<Product>(
        model: _entities[1],
        toOneRelations: (Product object) => [object.outlet],
        toManyRelations: (Product object) => {
              obx_int.RelInfo<Product>.toMany(2, object.id): object.categories,
              obx_int.RelInfo<ProductRevision>.toOneBacklink(7, object.id,
                      (ProductRevision srcObject) => srcObject.product):
                  object.revisions
            },
        getId: (Product object) => object.id,
        setId: (Product object, int id) {
          object.id = id;
        },
        objectToFB: (Product object, fb.Builder fbb) {
          final nameInReceiptOffset = object.nameInReceipt == null
              ? null
              : fbb.writeString(object.nameInReceipt!);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.active);
          fbb.addInt64(2, object.outlet.targetId);
          fbb.addOffset(3, nameInReceiptOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, codeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final activeParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false);
          final nameInReceiptParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = Product(
              name: nameParam,
              active: activeParam,
              nameInReceipt: nameInReceiptParam,
              code: codeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.outlet.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.outlet.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Product>(object.categories,
              store, obx_int.RelInfo<Product>.toMany(2, object.id));
          obx_int.InternalToManyAccess.setRelInfo<Product>(
              object.revisions,
              store,
              obx_int.RelInfo<ProductRevision>.toOneBacklink(7, object.id,
                  (ProductRevision srcObject) => srcObject.product));
          return object;
        }),
    ProductCategory: obx_int.EntityDefinition<ProductCategory>(
        model: _entities[2],
        toOneRelations: (ProductCategory object) => [object.outlet],
        toManyRelations: (ProductCategory object) => {
              obx_int.RelInfo<Product>.toManyBacklink(2, object.id):
                  object.products
            },
        getId: (ProductCategory object) => object.id,
        setId: (ProductCategory object, int id) {
          object.id = id;
        },
        objectToFB: (ProductCategory object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addBool(2, object.active);
          fbb.addInt64(3, object.outlet.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final activeParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final object = ProductCategory(name: nameParam, active: activeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.outlet.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.outlet.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<ProductCategory>(
              object.products,
              store,
              obx_int.RelInfo<Product>.toManyBacklink(2, object.id));
          return object;
        }),
    ProductRevision: obx_int.EntityDefinition<ProductRevision>(
        model: _entities[3],
        toOneRelations: (ProductRevision object) => [object.product],
        toManyRelations: (ProductRevision object) => {},
        getId: (ProductRevision object) => object.id,
        setId: (ProductRevision object, int id) {
          object.id = id;
        },
        objectToFB: (ProductRevision object, fb.Builder fbb) {
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.numberOfRevision);
          fbb.addFloat64(3, object.price);
          fbb.addInt64(6, object.product.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final numberOfRevisionParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final priceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = ProductRevision(
              numberOfRevision: numberOfRevisionParam, price: priceParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.product.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.product.attach(store);
          return object;
        }),
    Discount: obx_int.EntityDefinition<Discount>(
        model: _entities[4],
        toOneRelations: (Discount object) => [],
        toManyRelations: (Discount object) => {},
        getId: (Discount object) => object.id,
        setId: (Discount object, int id) {
          object.id = id;
        },
        objectToFB: (Discount object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.discountPercentage);
          fbb.addFloat64(2, object.discountPrice);
          fbb.addFloat64(3, object.fixedPrice);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Discount()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..discountPercentage =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0)
            ..discountPrice =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..fixedPrice =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);

          return object;
        }),
    OrderRow: obx_int.EntityDefinition<OrderRow>(
        model: _entities[5],
        toOneRelations: (OrderRow object) =>
            [object.outlet, object.paymentMethod],
        toManyRelations: (OrderRow object) => {
              obx_int.RelInfo<OrderRow>.toMany(3, object.id):
                  object.orderRowItem
            },
        getId: (OrderRow object) => object.id,
        setId: (OrderRow object, int id) {
          object.id = id;
        },
        objectToFB: (OrderRow object, fb.Builder fbb) {
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.timeStamp.microsecondsSinceEpoch * 1000);
          fbb.addFloat64(2, object.payAmount);
          fbb.addBool(3, object.isTaxActive);
          fbb.addFloat64(4, object.taxPercentage);
          fbb.addFloat64(5, object.totalPrice);
          fbb.addInt64(6, object.totalItem);
          fbb.addInt64(7, object.outlet.targetId);
          fbb.addInt64(8, object.paymentMethod.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final isTaxActiveParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final taxPercentageParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = OrderRow(
              isTaxActive: isTaxActiveParam, taxPercentage: taxPercentageParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..timeStamp = DateTime.fromMicrosecondsSinceEpoch(
                (const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0) /
                        1000)
                    .round())
            ..payAmount =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..totalPrice =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..totalItem =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.outlet.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.outlet.attach(store);
          object.paymentMethod.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.paymentMethod.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<OrderRow>(object.orderRowItem,
              store, obx_int.RelInfo<OrderRow>.toMany(3, object.id));
          return object;
        }),
    OrderRowItem: obx_int.EntityDefinition<OrderRowItem>(
        model: _entities[6],
        toOneRelations: (OrderRowItem object) =>
            [object.orderRow, object.product, object.productRevision],
        toManyRelations: (OrderRowItem object) => {},
        getId: (OrderRowItem object) => object.id,
        setId: (OrderRowItem object, int id) {
          object.id = id;
        },
        objectToFB: (OrderRowItem object, fb.Builder fbb) {
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.orderRow.targetId);
          fbb.addInt64(2, object.product.targetId);
          fbb.addInt64(3, object.productRevision.targetId);
          fbb.addInt64(4, object.quantity);
          fbb.addFloat64(5, object.totalPriceItem);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final quantityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = OrderRowItem(quantity: quantityParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..totalPriceItem =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.orderRow.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.orderRow.attach(store);
          object.product.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.product.attach(store);
          object.productRevision.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.productRevision.attach(store);
          return object;
        }),
    Outlet: obx_int.EntityDefinition<Outlet>(
        model: _entities[7],
        toOneRelations: (Outlet object) => [],
        toManyRelations: (Outlet object) => {
              obx_int.RelInfo<PaymentMethod>.toOneBacklink(5, object.id,
                      (PaymentMethod srcObject) => srcObject.outlet):
                  object.paymentMethods,
              obx_int.RelInfo<ProductCategory>.toOneBacklink(4, object.id,
                      (ProductCategory srcObject) => srcObject.outlet):
                  object.productCategories,
              obx_int.RelInfo<Product>.toOneBacklink(
                      3, object.id, (Product srcObject) => srcObject.outlet):
                  object.products,
              obx_int.RelInfo<OrderRow>.toOneBacklink(
                      8, object.id, (OrderRow srcObject) => srcObject.outlet):
                  object.orders
            },
        getId: (Outlet object) => object.id,
        setId: (Outlet object, int id) {
          object.id = id;
        },
        objectToFB: (Outlet object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          final phoneNumberOffset = object.phoneNumber == null
              ? null
              : fbb.writeString(object.phoneNumber!);
          final receiptMessageOffset = object.receiptMessage == null
              ? null
              : fbb.writeString(object.receiptMessage!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, addressOffset);
          fbb.addOffset(3, phoneNumberOffset);
          fbb.addOffset(4, receiptMessageOffset);
          fbb.addBool(5, object.activeTax);
          fbb.addFloat64(6, object.taxPercentage);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Outlet()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..address = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..phoneNumber = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..receiptMessage = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..activeTax =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false)
            ..taxPercentage =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          obx_int.InternalToManyAccess.setRelInfo<Outlet>(
              object.paymentMethods,
              store,
              obx_int.RelInfo<PaymentMethod>.toOneBacklink(
                  5, object.id, (PaymentMethod srcObject) => srcObject.outlet));
          obx_int.InternalToManyAccess.setRelInfo<Outlet>(
              object.productCategories,
              store,
              obx_int.RelInfo<ProductCategory>.toOneBacklink(4, object.id,
                  (ProductCategory srcObject) => srcObject.outlet));
          obx_int.InternalToManyAccess.setRelInfo<Outlet>(
              object.products,
              store,
              obx_int.RelInfo<Product>.toOneBacklink(
                  3, object.id, (Product srcObject) => srcObject.outlet));
          obx_int.InternalToManyAccess.setRelInfo<Outlet>(
              object.orders,
              store,
              obx_int.RelInfo<OrderRow>.toOneBacklink(
                  8, object.id, (OrderRow srcObject) => srcObject.outlet));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [PaymentMethod] entity fields to define ObjectBox queries.
class PaymentMethod_ {
  /// see [PaymentMethod.id]
  static final id =
      obx.QueryIntegerProperty<PaymentMethod>(_entities[0].properties[0]);

  /// see [PaymentMethod.name]
  static final name =
      obx.QueryStringProperty<PaymentMethod>(_entities[0].properties[1]);

  /// see [PaymentMethod.sameAsAmount]
  static final sameAsAmount =
      obx.QueryBooleanProperty<PaymentMethod>(_entities[0].properties[2]);

  /// see [PaymentMethod.active]
  static final active =
      obx.QueryBooleanProperty<PaymentMethod>(_entities[0].properties[3]);

  /// see [PaymentMethod.outlet]
  static final outlet =
      obx.QueryRelationToOne<PaymentMethod, Outlet>(_entities[0].properties[4]);

  /// see [PaymentMethod.orders]
  static final orders = obx.QueryRelationToMany<PaymentMethod, OrderRow>(
      _entities[0].relations[0]);
}

/// [Product] entity fields to define ObjectBox queries.
class Product_ {
  /// see [Product.id]
  static final id =
      obx.QueryIntegerProperty<Product>(_entities[1].properties[0]);

  /// see [Product.active]
  static final active =
      obx.QueryBooleanProperty<Product>(_entities[1].properties[1]);

  /// see [Product.outlet]
  static final outlet =
      obx.QueryRelationToOne<Product, Outlet>(_entities[1].properties[2]);

  /// see [Product.nameInReceipt]
  static final nameInReceipt =
      obx.QueryStringProperty<Product>(_entities[1].properties[3]);

  /// see [Product.name]
  static final name =
      obx.QueryStringProperty<Product>(_entities[1].properties[4]);

  /// see [Product.code]
  static final code =
      obx.QueryStringProperty<Product>(_entities[1].properties[5]);

  /// see [Product.categories]
  static final categories = obx.QueryRelationToMany<Product, ProductCategory>(
      _entities[1].relations[0]);

  /// see [Product.revisions]
  static final revisions = obx.QueryBacklinkToMany<ProductRevision, Product>(
      ProductRevision_.product);
}

/// [ProductCategory] entity fields to define ObjectBox queries.
class ProductCategory_ {
  /// see [ProductCategory.id]
  static final id =
      obx.QueryIntegerProperty<ProductCategory>(_entities[2].properties[0]);

  /// see [ProductCategory.name]
  static final name =
      obx.QueryStringProperty<ProductCategory>(_entities[2].properties[1]);

  /// see [ProductCategory.active]
  static final active =
      obx.QueryBooleanProperty<ProductCategory>(_entities[2].properties[2]);

  /// see [ProductCategory.outlet]
  static final outlet = obx.QueryRelationToOne<ProductCategory, Outlet>(
      _entities[2].properties[3]);
}

/// [ProductRevision] entity fields to define ObjectBox queries.
class ProductRevision_ {
  /// see [ProductRevision.id]
  static final id =
      obx.QueryIntegerProperty<ProductRevision>(_entities[3].properties[0]);

  /// see [ProductRevision.numberOfRevision]
  static final numberOfRevision =
      obx.QueryIntegerProperty<ProductRevision>(_entities[3].properties[1]);

  /// see [ProductRevision.price]
  static final price =
      obx.QueryDoubleProperty<ProductRevision>(_entities[3].properties[2]);

  /// see [ProductRevision.product]
  static final product = obx.QueryRelationToOne<ProductRevision, Product>(
      _entities[3].properties[3]);
}

/// [Discount] entity fields to define ObjectBox queries.
class Discount_ {
  /// see [Discount.id]
  static final id =
      obx.QueryIntegerProperty<Discount>(_entities[4].properties[0]);

  /// see [Discount.discountPercentage]
  static final discountPercentage =
      obx.QueryDoubleProperty<Discount>(_entities[4].properties[1]);

  /// see [Discount.discountPrice]
  static final discountPrice =
      obx.QueryDoubleProperty<Discount>(_entities[4].properties[2]);

  /// see [Discount.fixedPrice]
  static final fixedPrice =
      obx.QueryDoubleProperty<Discount>(_entities[4].properties[3]);
}

/// [OrderRow] entity fields to define ObjectBox queries.
class OrderRow_ {
  /// see [OrderRow.id]
  static final id =
      obx.QueryIntegerProperty<OrderRow>(_entities[5].properties[0]);

  /// see [OrderRow.timeStamp]
  static final timeStamp =
      obx.QueryDateNanoProperty<OrderRow>(_entities[5].properties[1]);

  /// see [OrderRow.payAmount]
  static final payAmount =
      obx.QueryDoubleProperty<OrderRow>(_entities[5].properties[2]);

  /// see [OrderRow.isTaxActive]
  static final isTaxActive =
      obx.QueryBooleanProperty<OrderRow>(_entities[5].properties[3]);

  /// see [OrderRow.taxPercentage]
  static final taxPercentage =
      obx.QueryDoubleProperty<OrderRow>(_entities[5].properties[4]);

  /// see [OrderRow.totalPrice]
  static final totalPrice =
      obx.QueryDoubleProperty<OrderRow>(_entities[5].properties[5]);

  /// see [OrderRow.totalItem]
  static final totalItem =
      obx.QueryIntegerProperty<OrderRow>(_entities[5].properties[6]);

  /// see [OrderRow.outlet]
  static final outlet =
      obx.QueryRelationToOne<OrderRow, Outlet>(_entities[5].properties[7]);

  /// see [OrderRow.paymentMethod]
  static final paymentMethod = obx.QueryRelationToOne<OrderRow, PaymentMethod>(
      _entities[5].properties[8]);

  /// see [OrderRow.orderRowItem]
  static final orderRowItem = obx.QueryRelationToMany<OrderRow, OrderRowItem>(
      _entities[5].relations[0]);
}

/// [OrderRowItem] entity fields to define ObjectBox queries.
class OrderRowItem_ {
  /// see [OrderRowItem.id]
  static final id =
      obx.QueryIntegerProperty<OrderRowItem>(_entities[6].properties[0]);

  /// see [OrderRowItem.orderRow]
  static final orderRow = obx.QueryRelationToOne<OrderRowItem, OrderRow>(
      _entities[6].properties[1]);

  /// see [OrderRowItem.product]
  static final product =
      obx.QueryRelationToOne<OrderRowItem, Product>(_entities[6].properties[2]);

  /// see [OrderRowItem.productRevision]
  static final productRevision =
      obx.QueryRelationToOne<OrderRowItem, ProductRevision>(
          _entities[6].properties[3]);

  /// see [OrderRowItem.quantity]
  static final quantity =
      obx.QueryIntegerProperty<OrderRowItem>(_entities[6].properties[4]);

  /// see [OrderRowItem.totalPriceItem]
  static final totalPriceItem =
      obx.QueryDoubleProperty<OrderRowItem>(_entities[6].properties[5]);
}

/// [Outlet] entity fields to define ObjectBox queries.
class Outlet_ {
  /// see [Outlet.id]
  static final id =
      obx.QueryIntegerProperty<Outlet>(_entities[7].properties[0]);

  /// see [Outlet.name]
  static final name =
      obx.QueryStringProperty<Outlet>(_entities[7].properties[1]);

  /// see [Outlet.address]
  static final address =
      obx.QueryStringProperty<Outlet>(_entities[7].properties[2]);

  /// see [Outlet.phoneNumber]
  static final phoneNumber =
      obx.QueryStringProperty<Outlet>(_entities[7].properties[3]);

  /// see [Outlet.receiptMessage]
  static final receiptMessage =
      obx.QueryStringProperty<Outlet>(_entities[7].properties[4]);

  /// see [Outlet.activeTax]
  static final activeTax =
      obx.QueryBooleanProperty<Outlet>(_entities[7].properties[5]);

  /// see [Outlet.taxPercentage]
  static final taxPercentage =
      obx.QueryDoubleProperty<Outlet>(_entities[7].properties[6]);

  /// see [Outlet.paymentMethods]
  static final paymentMethods =
      obx.QueryBacklinkToMany<PaymentMethod, Outlet>(PaymentMethod_.outlet);

  /// see [Outlet.productCategories]
  static final productCategories =
      obx.QueryBacklinkToMany<ProductCategory, Outlet>(ProductCategory_.outlet);

  /// see [Outlet.products]
  static final products =
      obx.QueryBacklinkToMany<Product, Outlet>(Product_.outlet);

  /// see [Outlet.orders]
  static final orders =
      obx.QueryBacklinkToMany<OrderRow, Outlet>(OrderRow_.outlet);
}
